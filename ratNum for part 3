#ratNum.py

class ratNum:
    def __init__(self, a, b):  #Intializing the vzariables
        while b == 0:         # Ensures the denominator is not zero
            print("Error: Denominator cannot be zero. Please enter a valid denominator.")
            b = int(input("Enter denominator for rational number (b): "))
        self.a = a   # Numerator
        self.b = b   # Denominator

    def gcd(self, x, y):
      # Computes the greatest common divisor (GCD)
        while y:
            x, y = y, x % y
        return x

    def lcm(self, x, y):
        # Computes the least common multiple (LCM)
        return abs(x * y) // self.gcd(x, y)

    def subtract(self, other):
       # Ensures the other object is a ratNum instance
        if type(other) is not ratNum:
          return "Subtraction is only defined between ratNum instances."
        
        # Calculate LCM of the two denominators
        common_denominator = self.lcm(self.b, other.b)   
        
        # Adjust numerators to the common denominator
        new_a1 = self.a * (common_denominator // self.b)
        new_a2 = other.a * (common_denominator // other.b)
        
        # Perform the subtraction
        result_a = new_a1 - new_a2
        
        return ratNum(result_a, common_denominator)

    def __str__(self):
    # Returns a string representation of the rational number
        return f"{self.a}/{self.b}"

    def power(self,n):
        #Raises the rational number to an integer power.
        if self.a == 0:      # Error handling for zero base
            print("Error: Cannot raise zero to a power.")
            return None

        # Calculate the power 
        if n >= 0: 
            new_a = self.a ** n 
            new_b = self.b ** n 
        else: 
            new_a = self.b ** abs(n) 
            new_b = self.a ** abs(n) 
            
        # Simplify the result 
        gcd = self.gcd(new_a, new_b) 
        new_a //= gcd 
        new_b //= gcd 
        return ratNum(new_a, new_b)
        
        
    def power_of_rational(self, exponent):
      #Raises the rational number to another rational number
      if self.a == 0:        # Error handling for zero base
        print("Error: Cannot raise zero to a power.")
        return None

    # Convert exponent to a float
      base_a = self.a / self.b
      exp_a = exponent.a
      exp_b = exponent.b

    # Calculate the floating point result
      result = (base_a ** exp_a) ** (1/exp_b)
      result_num = float(result)

      # Find numerator and denominator from the float approximation
      denom = 10  # To create a ratio
      numer = int(result_num * denom)

      return ratNum(numer, denom)
        
