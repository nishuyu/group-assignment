# ratNum.py

class ratNum:
    def __init__(self, a, b):  #Initializing the variables
        while b == 0:        # Ensures denominator is not zero
            print("Error: Denominator cannot be zero. Please enter a valid denominator.")
            b = int(input("Enter denominator for rational number (b): "))
        self.a = a    # Numerator
        self.b = b    # Denominator

    def gcd(self, x, y):
        # Computes the greatest common divisor (GCD)
        while y:
            x, y = y, x % y
        return x

    def lcm(self, x, y):
        # Computes the least common multiple (LCM)
        return abs(x * y) // self.gcd(x, y)

    def subtract(self, other):
        # Ensures the other object is a ratNum instance
        if type(other) is not ratNum:
          return "Subtraction is only defined between ratNum instances."
        
        # Calculate LCM of the two denominators
        common_denominator = self.lcm(self.b, other.b)
        
        # Adjust numerators to the common denominator
        new_a1 = self.a * (common_denominator // self.b)
        new_a2 = other.a * (common_denominator // other.b)
        
        # Perform the subtraction
        result_a = new_a1 - new_a2
        
        return ratNum(result_a, common_denominator)

    def __str__(self):
    # Returns a string representation of the rational number
        return f"{self.a}/{self.b}"
